#include "pch.h"
#include "iostream"
#include "windows.h"
#define FILAS 45
#define COLUMNAS 180

using namespace std;
using namespace System;

//Funciones que facilitan procesos
void cursor(int x, int y)
{
	Console::SetCursorPosition(x, y);
	Console::CursorVisible = false;
}

//Dibujar y borrar Vehiculos
//Toyota
void carro1(int x, int y)
{													//ARACELLY
	Console::ForegroundColor = ConsoleColor::Red;
	cursor(x, y);		cout << "    ,-----,     "; Console::ForegroundColor = ConsoleColor::Red; Console::BackgroundColor = ConsoleColor::Black;
	cursor(x, y + 1);	cout << " ,--'---:---`--,"; Console::ForegroundColor = ConsoleColor::Red; Console::BackgroundColor = ConsoleColor::Black;
	cursor(x, y + 2);	cout << "==(o)-----(o)==J";
}
void borra_carro1(int x, int y)
{
	cursor(x, y);       cout << "                 ";
	cursor(x, y + 1);   cout << "                 ";
	cursor(x, y + 2);   cout << "                 ";
}

//Nissan
void carro2(int x, int y)
{
	Console::ForegroundColor = ConsoleColor::Green;
	cursor(x, y + 0);	cout << " _.-.____\\__     "; Console::BackgroundColor = ConsoleColor::Black; Console::ForegroundColor = ConsoleColor::Green;
	cursor(x, y + 1);	cout << "|  _        _`-. "; Console::BackgroundColor = ConsoleColor::Black; Console::ForegroundColor = ConsoleColor::Green;
	cursor(x, y + 2); 	cout << "'-(_)-----(_)--` ";
}
void borra_carro2(int x, int y)
{
	cursor(x, y);       cout << "                  ";
	cursor(x, y + 1);   cout << "                  ";
	cursor(x, y + 2);   cout << "                  ";
}

//Ferrari
void carro3(int x, int y)
{
	Console::ForegroundColor = ConsoleColor::Yellow;
	cursor(x, y);	  cout << ".-'''''-....."; Console::ForegroundColor = ConsoleColor::Yellow;
	cursor(x, y + 1); cout << "'=()===()=--'";
}
void borra_carro3(int x, int y)
{

	cursor(x, y + 0); 	cout << "            ";
	cursor(x, y + 1); 	cout << "            ";
}

//Kia
void carro4(int x, int y)
{
	Console::BackgroundColor = ConsoleColor::Black; Console::ForegroundColor = ConsoleColor::Blue;
	cursor(x, y + 0); cout << ".----.___"; Console::BackgroundColor = ConsoleColor::Black; Console::ForegroundColor = ConsoleColor::Blue;
	cursor(x, y + 1); cout << "'-O---O-’";
}
void borra_carro4(int x, int y)
{

	cursor(x, y + 0);  cout << "         ";
	cursor(x, y + 1);  cout << "         ";
}

//Chevrolet
void carro5(int x, int y)
{
	Console::ForegroundColor = ConsoleColor::Magenta;
	cursor(x, y + 0); cout << "  __    "; Console::ForegroundColor = ConsoleColor::Magenta;
	cursor(x, y + 1); cout << "_/[]\\ _ "; Console::ForegroundColor = ConsoleColor::Magenta;
	cursor(x, y + 2); cout << "O----O/ "; Console::ForegroundColor = ConsoleColor::Magenta;
}
void borra_carro5(int x, int y)
{

	cursor(x, y + 0); cout << "         ";
	cursor(x, y + 1); cout << "         ";
	cursor(x, y + 2); cout << "         ";
}
//Volkswagen (Volvo)
void carro6(int x, int y)
{
	Console::ForegroundColor = ConsoleColor::Cyan;
	cursor(x, y + 0); cout << "   ____   "; Console::ForegroundColor = ConsoleColor::Cyan;
	cursor(x, y + 1); cout << "  /_||_\\`."; Console::ForegroundColor = ConsoleColor::Cyan;
	cursor(x, y + 2); cout << " (o)----(o)";
}
void borra_carro6(int x, int y)
{
	cursor(x, y + 0); cout << "             ";
	cursor(x, y + 1); cout << "             ";
	cursor(x, y + 2); cout << "             ";
}



void titulo_inicio(int x, int y)							//ARACELLY
{
	cursor(x, y + 0); cout << "\t\t\t\t      ::::    ::: ::::::::::: ::::::::::: :::::::::   ::::::::" << endl;
	cursor(x, y + 1); cout << "\t\t\t\t     :+:+:   :+:     :+:         :+:     :+:    :+: :+:    :+:" << endl;
	cursor(x, y + 2); cout << "\t\t\t\t    :+:+:+  +:+     +:+         +:+     +:+    +:+ +:+    +:+ " << endl;
	cursor(x, y + 3); cout << "\t\t\t\t   +#+ +:+ +#+     +#+         +#+     +#++:++#:  +#+    +:+  " << endl;
	cursor(x, y + 4); cout << "\t\t\t\t  +#+  +#+#+#     +#+         +#+     +#+   +#+  +#+    +#+   " << endl;
	cursor(x, y + 5); cout << "\t\t\t\t #+#   #+#+#     #+#         #+#     #+#    #+# #+#    #+#    " << endl;
	cursor(x, y + 6); cout << "\t\t\t\t###    #### ###########     ###     ###    ###  ########      " << endl;
	cursor(x, y + 7); cout << "\t\t\t\t     ________________________________________________         " << endl;
	cursor(x, y + 8); cout << "\t\t\t\t    ____________________________  ____/__    |__  __ \\        " << endl;;
	cursor(x, y + 9); cout << "\t\t\t\t   ____________________________  /    __  /| |_  /_/ /        " << endl;
	cursor(x, y + 10); cout << "\t\t\t\t  ____________________________/ /___  _  ___ |  _, _/         " << endl;
	cursor(x, y + 11); cout << "\t\t\t\t _____________________________\\____/  /_/  |_/_/ |_|          " << endl;
}
void carro_inicio(int x, int y)
{
	cursor(x + 30, y + 21); cout << "                                           :;;+;;;:::..         .:;++;:                  " << endl;
	cursor(x + 30, y + 22); cout << "                                     .::    . .:;+XXXXXXXXXXX+ ::xXXXXx+;:::;::..::::::. " << endl;
	cursor(x + 30, y + 23); cout << "                                   :.   ...;XXXXXXXXXXXXXXXXX+:;XXXXXXXXXX;    :;++;;+x+." << endl;
	cursor(x + 30, y + 24); cout << "                              :.:;   ; :XXXXXXXXXXXXXXXXXXXXX:;XX+::;+XXX.::. .:       : " << endl;
	cursor(x + 30, y + 25); cout << "                              ;.  : :xXXXXXXXXXXXXXXX+++XXXX::xX:  ..:;    .:       .:::;" << endl;
	cursor(x + 30, y + 26); cout << "                     ::::.::. .:::::;;;;+++xxx++++++xXXXXxX+:;;:;+:.        :+x+   :++++x" << endl;
	cursor(x + 30, y + 27); cout << "             :;+;;  .;:.:          .::.....       .::;;.     .         :+xx+XXXX   x+XXxx" << endl;
	cursor(x + 30, y + 28); cout << "         +. ::  .+.::        :+:    :+;   ;+:                     :.       .Xxx+  ;+X+XX+" << endl;
	cursor(x + 30, y + 29); cout << "      ;;  :.  ;;:.       .;;.  :;:.  ;:.             ..:     ;;.         .+x+XX.  +++;XX:" << endl;
	cursor(x + 30, y + 30); cout << "    ;X;.:.  .          .  .:;:   :;: .  ....  ..  ::++++X;:  :         .;;  :+;. :+++;X+ " << endl;
	cursor(x + 30, y + 31); cout << "   xX;..                      ;::+ .. +XXXXx:   :+XXXXXxx:x:        . :  :;+:    X+XxXx; " << endl;
	cursor(x + 30, y + 32); cout << "  xX: ;                   :+;;x: :X;. ;X:      :xX+X;++XX+++        .::++.  .;:+xXXX+:+  " << endl;
	cursor(x + 30, y + 33); cout << " :         :::.::;::. :::  :X;  xXXx;.        :+;+;X+xXxxXX;x . ...:+::.:++XXX+;:..      " << endl;
	cursor(x + 30, y + 34); cout << "+  ..                     .;;:                +++Xx;;;:+xX+;X:  :+::;+XXX+;              " << endl;
	cursor(x + 30, y + 35); cout << " ;: :;                         .::.          :+:xX++ +;xXXX;X:+;;XXXX;                   " << endl;
	cursor(x + 30, y + 36); cout << " : ;XXXx++;:.  ..:::.   .::::.               :;X+xX:;;;XXXx+XxXXx:                       " << endl;
	cursor(x + 30, y + 37); cout << ".+:  :;+XXXXXXXXXXXXx; : :XXXXXX+     :::.  .;++XX+XXxXxXx+x+:                           " << endl;
	cursor(x + 30, y + 38); cout << "+;::;+;.    .:+xxxXx:   ;XXXXXXX++x+:       .;X++XXXXXXX+;+                              " << endl;
	cursor(x + 30, y + 39); cout << " ;:+;::+XXXX+;::;;;;.:+;;;;:.  :;;.      :;;:;xXXx;::::x+                                " << endl;
	cursor(x + 30, y + 40); cout << "   +XXXXx+;:::;;+;;...... ..   .::::::;;::;+xXXXXXx+;:                                   " << endl;
	cursor(x + 30, y + 41); cout << "     .+xXXXXXXXXx+;;;;;;;;;;;;;;;;;;+xXXXXX+;                                            " << endl;
	cursor(x + 30, y + 42); cout << "           :;+xXXXXXXXXXXXXXXXXXXXXx+;:                                                  " << endl;
	cursor(x + 30, y + 43); cout << "                                                                          Espere unos segundos...     " << endl;
}

//MATRIZ QUE CONTIENE/CREA EL MAPA						//VICTOR


int mapa[FILAS][COLUMNAS] = {
{5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,5,4,5,4,5,4,5,4,5,4,5,4,5,4},
{4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5},
{5,0,3,3,3,3,3,0,3,0,0,3,0,3,3,3,3,3,0,3,3,3,3,3,0,3,3,3,3,3,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,3,0,0,0,3,3,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,0,0,3,0,0,0,3,0,3,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,3,0,0,0,3,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,3,3,3,3,3,0,3,0,0,3,0,3,3,3,3,3,0,3,3,3,3,3,0,3,3,3,3,3,0,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,3,0,0,0,3,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,3,3,0,3,3,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,3,0,3,0,3,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,3,0,0,0,3,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,3,3,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,3,3,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,3,3,0,0,0,0,5},
{5,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,3,3,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,3,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,3,0,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,3,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,3,3,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,0,3,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,3,3,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,0,3,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,0,3,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,5},
{5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,4},
{4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5},
{5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,5,4,5,4,5,4,5,4,5,4,5,4,5,4},
};

void mapa_juego()
{
	for (int f = 0; f < FILAS; f++)
	{
		for (int c = 0; c < COLUMNAS; c++)
		{
			if (mapa[f][c] == 0)  Console::ForegroundColor = ConsoleColor::Black;
			if (mapa[f][c] == 1)  Console::ForegroundColor = ConsoleColor::Green;
			if (mapa[f][c] == 2)  Console::ForegroundColor = ConsoleColor::Red;
			if (mapa[f][c] == 3)  Console::ForegroundColor = ConsoleColor::Gray;
			if (mapa[f][c] == 4)  Console::ForegroundColor = ConsoleColor::White;
			if (mapa[f][c] == 5)  Console::ForegroundColor = ConsoleColor::Blue;
			cout << (char)219;
		}
		cout << endl;
	}
}


////
//CREDITOS FINALES																//ARACELLY
void creditos_titulo(int x, int y)
{
	cursor(x, y + 0); cout << "_________  ____    ______  ____   _____________  ____  ______" << endl;
	cursor(x, y + 1); cout << "__/ ____/ / __ \\  / ____/ / __ \\ /_  _/__  __ / / __ \\/_ ___/" << endl;
	cursor(x, y + 2); cout << "_/ /     / /_/ / / __/   / / / /  / /   / /    / / / /____ \\ " << endl;
	cursor(x, y + 3); cout << "/ /___  / _, _/ / /___  / /_/ / _/ /   / /    / /_/ /____/ / " << endl;
	cursor(x, y + 4); cout << "\\____/ /_/ |_| /_____/ /_____/ /___/  /_/     \\____/ /____/  " << endl;
}

void creditos(int x, int y)
{
	cursor(x, y + 0); cout << "\tDesarrollado por: " << endl;
	cursor(x, y + 1); cout << "  - Victor Abanto Vega" << endl;
	cursor(x, y + 2); cout << "  - Aracelly Cordova Gutierrez" << endl;
	cursor(x, y + 3); cout << "  - Silvana Sapallanay Yallico" << endl;
}

void winner(int x, int y)
{
	cursor(x, y + 0); cout << "___       __ ______ _   __  __  __  ______  ____ " << endl;
	cursor(x, y + 1); cout << "__ |     / //__ _ // | / / / | / / / ____/ / __ \\" << endl;
	cursor(x, y + 2); cout << "__ | /| / /  / /  /  |/ / /  |/ / / __/   / /_/ /" << endl;
	cursor(x, y + 3); cout << "__ |/ |/ / _/ /  / /|  / / /|  / / /___  / _, _/ " << endl;
	cursor(x, y + 4); cout << "____/|__/ /___/ /_/ |_/ /_/ |_/ /_____/ /_/ |_|  " << endl;

}

void despedida(int x, int y)
{

	cursor(x, y + 0); cout << " ________                 __               ____          " << endl;
	cursor(x, y + 1); cout << "/ _  __/ /_  ____ _____  / /_______       / __/___  _____" << endl;
	cursor(x, y + 2); cout << "  / / / __ \\/ __ `/ __ \\/ //_/ ___/      / /_/ __ \\/ ___/" << endl;
	cursor(x, y + 3); cout << " / / / / / / /_/ / / / /, < (__  )      / __/ /_/ / /    " << endl;
	cursor(x, y + 4); cout << "/_/ /_/ /_/\\__,_/_/ /_/_/|_/____/      /_/  \\____/_/     " << endl;
	cursor(x, y + 5); cout << "        ____  / /___ ___  __(_)___  ____ _   / /         " << endl;
	cursor(x, y + 6); cout << "       / __ \\/ / __ `/ / / / / __ \\/ __ `/  / /          " << endl;
	cursor(x, y + 7); cout << "      / /_/ / / /_/ / /_/ / / / / / /_/ /  /_/           " << endl;
	cursor(x, y + 8); cout << "     / .___/_/\\__,_/\\__, /_/_/ /_/\\__, /  (_)            " << endl;
	cursor(x, y + 9); cout << "    /_/            /____/        /____/                  " << endl;
}

//Genera cantidad aleatoria de carreras
int cantidad_de_carreras()								//ARACELLY
{
	return 4 + rand() % (8 - 4 + 1);

}

//Genera velocidad aleatoria entre dos valores
int velocidad_aleatoria(int min, int max)
{
	return rand() % (max - min + 1) + min;
}
/////Victor
//funcion para reducir decimales 
double redondear2(float numero)
{
	return round(numero * 100.0) / 100.0;
}

//SILVANA
void mostrar_cronometro(int segundos)
{
	int x = 90;
	int y = FILAS; // justo debajo del mapa               
	cursor(x, y);
	Console::ForegroundColor = ConsoleColor::White;
	cout << "Tiempo: " << segundos << " s  ";
}

//SILVANA
void ranking(int x, int y)
{

	cursor(x, y + 0); cout << "     (                 )      )  (        )           (     (        )          (      " << endl;
	cursor(x, y + 1); cout << "     )\\ )    (      ( /(   ( /(  )\\ )  ( /(  (        )\\ )  )\\ )  ( /(   (      )\\ )   " << endl;
	cursor(x, y + 2); cout << "   (()/(    )\\     )\\())  )\\())(()/(  )\\()) )\ )    (()/( (()/(  )\\())  )\\    (()/(   " << endl;
	cursor(x, y + 3); cout << "    /(_))((((_)(  ((_)\\ |((_)\\  /(_))((_)\\ (()/(     /(_)) /(_))((_)\\((((_)(   /(_))    " << endl;
	cursor(x, y + 4); cout << "    (_))   )\\ _ )\\  _((_)|_ ((_)(_))   _((_) /(_))_  (_))_|(_))   _((_))\\ _ )\\ (_))    " << endl;
	cursor(x, y + 5); cout << "    | _ \\  (_)_\\(_)| \\| || |/ / |_ _| | \\| |(_)) __| | |_  |_ _| | \\| |(_)_\\(_)| |     " << endl;
	cursor(x, y + 6); cout << "    |   /   / _ \\  | .` |  ' <   | |  | .` |  | (_ | | __|  | |  | .` | / _ \\  | |       " << endl;
	cursor(x, y + 7); cout << "    |_|_\\  /_/ \\_\\ |_|\\_| _|\\_\\ |___| |_|\\_|   \\___| |_|   |___| |_|\\_|/_/ \\_\\ |____|    " << endl;
}



// Función para mostrar el ranking de ganadores al final de todas las carreras                          
void mostrar_ranking(int cant_ganadas_1, int cant_ganadas_2, int cant_ganadas_3, int cant_ganadas_4, int cant_ganadas_5, int cant_ganadas_6)
{
	int ganadas[6] = { cant_ganadas_1, cant_ganadas_2, cant_ganadas_3, cant_ganadas_4, cant_ganadas_5, cant_ganadas_6 };
	int max_ganadas = ganadas[0];
	for (int i = 1; i < 6; i++) {
		if (ganadas[i] > max_ganadas) max_ganadas = ganadas[i];
	}

	// Contar cuántos carros tienen la máxima cantidad de victorias
	int cantidad_ganadores = 0;
	for (int i = 0; i < 6; i++) {
		if (ganadas[i] == max_ganadas) cantidad_ganadores++;
	}


	for (int i = 0; i < 6; i++)
	{
		cursor(25, 20 + i);
		cout << "Carro " << (i + 1) << " (";
		switch (i + 1)
		{
		case 1: cout << "Toyota"; break;
		case 2: cout << "Nissan"; break;
		case 3: cout << "Ferrari"; break;
		case 4: cout << "Kia"; break;
		case 5: cout << "Chevrolet"; break;
		case 6: cout << "Volkswagen"; break;
		}
		cout << "): " << ganadas[i] << " victorias";
		if (ganadas[i] == max_ganadas && max_ganadas > 0)
		{
			if (cantidad_ganadores > 1)
				cout << "  <- GANADOR (EMPATE)";
			else
				cout << "  <- GANADOR";
		}
		else
		{
			cout << "  <- PERDEDOR";
		}
		cout << endl;
	}
}
int main() {
	int contador1 = 0;
	int contador2 = 0;
	int contador3 = 0;
	int contador4 = 0;
	int contador5 = 0;
	int contador6 = 0;
	int tick_ms = 10;
	int velocidad1;
	int velocidad2;
	int velocidad3;
	int velocidad4;
	int velocidad5;
	int velocidad6;
	int carrera_contador = 1;
	int ganador = 0;
	int cant_ganadas_1 = 0;
	int cant_ganadas_2 = 0;
	int cant_ganadas_3 = 0;
	int cant_ganadas_4 = 0;
	int cant_ganadas_5 = 0;
	int cant_ganadas_6 = 0;

	//coordenadas iniciales de los carros
	int xp = 2, yp = 9;
	int xp2 = 2, yp2 = 14;
	int xp3 = 2, yp3 = 19;
	int xp4 = 2, yp4 = 23;
	int xp5 = 2, yp5 = 27;
	int xp6 = 2, yp6 = 32;

	srand(time(nullptr));
	int carrera = cantidad_de_carreras();


	Console::SetWindowSize(180, 49);
	//pantalla de inicio
	titulo_inicio(10, 3);
	carro_inicio(15, 0);
	//tiempo de espera para el juego
	_sleep(6000);
	//VICTOR
		//CICLO DINAMICA DEL JUEGO
	while (carrera_contador <= carrera)
	{
		//pantalla de juego
		Console::Clear();
		mapa_juego();

		//CARACTERISTICAS DE LOS CARROS                            
		//CARRO 1
		velocidad1 = velocidad_aleatoria(10, 50);
		int ticks1 = velocidad1 / tick_ms;
		float cps1 = (1000.0 / (velocidad1)) * 1.0;
		//CARRO 2
		velocidad2 = velocidad_aleatoria(10, 50);
		int ticks2 = velocidad2 / tick_ms;
		float cps2 = (1000.0 / (velocidad2)) * 1.0;
		//CARRO 3
		velocidad3 = velocidad_aleatoria(10, 50);
		int ticks3 = velocidad3 / tick_ms;
		float cps3 = (1000.0 / (velocidad3)) * 1.0;
		//CARRO 4
		velocidad4 = velocidad_aleatoria(10, 50);
		int ticks4 = velocidad4 / tick_ms;
		float cps4 = (1000.0 / (velocidad4)) * 1.0;
		//CARRO 5
		velocidad5 = velocidad_aleatoria(10, 50);
		int ticks5 = velocidad5 / tick_ms;
		float cps5 = (1000.0 / (velocidad5)) * 1.0;
		//CARRO 6
		velocidad6 = velocidad_aleatoria(10, 50);
		int ticks6 = velocidad6 / tick_ms;
		float cps6 = (1000.0 / (velocidad6)) * 1.0;

		//INFORMACION DEL TABLERO
		Console::ForegroundColor = ConsoleColor::White;
		cout << "carrera: " << carrera_contador << "/" << carrera << "           " << "Si un metro es 1 espacio y m/s metros por segundo..." << "          " << "carrera: " << carrera_contador << "/" << carrera << endl;

		cout << "Toyota(1): " << redondear2(cps1) << " m/s" << "       " << " Nissan(2): " << redondear2(cps2) << " m/s" << "       " << " Ferrari(3): " << redondear2(cps3) << " m/s" << "       " << "Kia(4): " << redondear2(cps4) << " m/s" << "       " << "    Chevrolet(5): " << redondear2(cps5) << " m/s" << "      " << "Volkswagen (6): " << redondear2(cps6) << " m/s" << endl;

		cout << "Los espacios que ocupa el ancho de los vehiculos son:" << "Toyota= 16 e" << ' ' << "   Nissan = 17 e" << ' ' << "   Ferrari= 13 e" << ' ' << "   Kia= 9 e" << ' ' << "   Chevrolet= 7 e" << ' ' << "   Volkswagen= 10 e" << endl;

		///////CONTADOR
		int tiempo_ms = 0;
		int segundos = 0;
		mostrar_cronometro(segundos);

		//CICLO DE MOVIMIENTO DE RONDA
		while (segundos <= 70) {
			contador1++;
			contador2++;
			contador3++;
			contador4++;
			contador5++;
			contador6++;
			//Comprueba si gano el 1
			if (contador1 >= ticks1 && (mapa[yp][xp + 17] == 0)) {
				borra_carro1(xp, yp);
				xp++;
				carro1(xp, yp);
				contador1 = 0;
			}

			if (contador1 >= ticks1 && mapa[yp][xp + 17] == 2) {
				ganador = 1;
				break;

			}
			//Comprueba si gano el 2
			if (contador2 >= ticks2 && mapa[yp2][xp2 + 16] == 0) {
				borra_carro2(xp2, yp2);
				xp2++;
				carro2(xp2, yp2);
				contador2 = 0;
			}

			if (contador2 >= ticks2 && mapa[yp2][xp2 + 16] == 2) {
				ganador = 2;
				break;

			}
			//Comprueba si gano el 3
			if (contador3 >= ticks3 && mapa[yp3][xp3 + 13] == 0) {
				borra_carro3(xp3, yp3);
				xp3++;
				carro3(xp3, yp3);
				contador3 = 0;
			}

			if (contador3 >= ticks3 && mapa[yp3][xp3 + 13] == 2) {
				ganador = 3;
				break;

			}
			//Comprueba si gano el 4
			if (contador4 >= ticks4 && mapa[yp4][xp4] == 0) {
				borra_carro4(xp4, yp4);
				xp4++;
				carro4(xp4, yp4);
				contador4 = 0;
			}

			if (contador4 >= ticks4 && mapa[yp4][xp4] == 2) {
				ganador = 4;
				break;

			}
			//Comprueba si gano el 5
			if (contador5 >= ticks5 && mapa[yp5][xp5] == 0) {
				borra_carro5(xp5, yp5);
				xp5++;
				carro5(xp5, yp5);
				contador5 = 0;
			}
			if (contador5 >= ticks5 && mapa[yp5][xp5] == 2) {
				ganador = 5;
				break;
			}
			//Comprueba si gano el 6
			if (contador6 >= ticks6 && mapa[yp6][xp6] == 0) {
				borra_carro6(xp6, yp6);
				xp6++;
				carro6(xp6, yp6);
				contador6 = 0;
			}

			if (contador6 >= ticks6 && mapa[yp6][xp6] == 2) {
				ganador = 6;
				break;

			}
			_sleep(tick_ms); // Dormir 10 ms

			tiempo_ms += tick_ms;                                        //SILVANA
			if (tiempo_ms >= 600)
			{
				segundos++;
				mostrar_cronometro(segundos);
				tiempo_ms = 0;
			}
		}

		//Ganador de cada partida						
		Console::Clear();
		winner(25, 3);

		switch (ganador) {                                                                  //  SILVANA 
		case 1:
			cursor(50, 12); cout << "El ganador es el carro 1 (Toyota)!" << endl;
			carro1(60, 15);
			cant_ganadas_1++;
			break;
		case 2:
			cursor(50, 12); cout << "El ganador es el carro 2 (Nissan)!" << endl;
			carro2(60, 15);
			cant_ganadas_2++;
			break;
		case 3:
			cursor(50, 12); cout << "El ganador es el carro 3 (Ferrari)!" << endl;
			carro3(60, 15);
			cant_ganadas_3++;
			break;
		case 4:
			cursor(50, 12); cout << "El ganador es el carro 4 (Kia)!" << endl;
			carro4(60, 15);
			cant_ganadas_4++;
			break;
		case 5:
			cursor(50, 12); cout << "El ganador es el carro 5 (Chevrolet)!" << endl;
			carro5(60, 15);
			cant_ganadas_5++;
			break;
		case 6:
			cursor(50, 12); cout << "El ganador es el carro 6 (Volkswagen)!" << endl;
			carro6(60, 15);
			cant_ganadas_6++;
			break;
		default:
			cursor(50, 12); cout << "ESTA CARRERA ES UN EMPATE !" << endl;
			break;
		}

		for (int i = 1; i <= 5; i++)
		{
			_sleep(1000);
		}
		//PREPARACION PARA LA SIGUIENTE CARRERA/RONDA
		carrera_contador++;
		contador1 = 0;
		contador2 = 0;
		contador3 = 0;
		contador4 = 0;
		contador5 = 0;
		contador6 = 0;
		xp = 2, yp = 9;
		xp2 = 2, yp2 = 14;
		xp3 = 2, yp3 = 19;
		xp4 = 2, yp4 = 23;
		xp5 = 2, yp5 = 27;
		xp6 = 2, yp6 = 32;
		ganador = 0;

	}
	Console::Clear();


	ranking(25, 3);
	mostrar_ranking(cant_ganadas_1, cant_ganadas_2, cant_ganadas_3, cant_ganadas_4, cant_ganadas_5, cant_ganadas_6);
	for (int i = 1; i <= 6; i++)
	{
		_sleep(2000);
	}

	Console::Clear();
	//Secuencia de CREDITOS
	creditos_titulo(25, 3);
	creditos(25, 13);
	//DESPEDIDA
	Console::Clear();
	despedida(25, 20);


	system("pause>0");
	return 0;
}